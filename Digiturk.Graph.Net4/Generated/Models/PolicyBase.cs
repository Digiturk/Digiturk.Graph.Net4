// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models {
    public class PolicyBase : DirectoryObject, IParsable 
    {
        /// <summary>Description for this policy. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Display name for this policy. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PolicyBase"/> and sets the default values.
        /// </summary>
        public PolicyBase() : base()
        {
            OdataType = "#microsoft.graph.policyBase";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PolicyBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new PolicyBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
PolicyBase result;
switch (mappingValue)
{
    case "#microsoft.graph.activityBasedTimeoutPolicy":
        result = new ActivityBasedTimeoutPolicy();
        break;
    case "#microsoft.graph.appManagementPolicy":
        result = new AppManagementPolicy();
        break;
    case "#microsoft.graph.authorizationPolicy":
        result = new AuthorizationPolicy();
        break;
    case "#microsoft.graph.claimsMappingPolicy":
        result = new ClaimsMappingPolicy();
        break;
    case "#microsoft.graph.crossTenantAccessPolicy":
        result = new CrossTenantAccessPolicy();
        break;
    case "#microsoft.graph.homeRealmDiscoveryPolicy":
        result = new HomeRealmDiscoveryPolicy();
        break;
    case "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy":
        result = new IdentitySecurityDefaultsEnforcementPolicy();
        break;
    case "#microsoft.graph.permissionGrantPolicy":
        result = new PermissionGrantPolicy();
        break;
    case "#microsoft.graph.stsPolicy":
        result = new StsPolicy();
        break;
    case "#microsoft.graph.tenantAppManagementPolicy":
        result = new TenantAppManagementPolicy();
        break;
    case "#microsoft.graph.tokenIssuancePolicy":
        result = new TokenIssuancePolicy();
        break;
    case "#microsoft.graph.tokenLifetimePolicy":
        result = new TokenLifetimePolicy();
        break;
    default:
        result = new PolicyBase();
        break;
}
return result;

// Original C# 8.0 code:
// return mappingValue switch
// {
//     "#microsoft.graph.activityBasedTimeoutPolicy" => new ActivityBasedTimeoutPolicy(),
//     "#microsoft.graph.appManagementPolicy" => new AppManagementPolicy(),
//     "#microsoft.graph.authorizationPolicy" => new AuthorizationPolicy(),
//     "#microsoft.graph.claimsMappingPolicy" => new ClaimsMappingPolicy(),
//     "#microsoft.graph.crossTenantAccessPolicy" => new CrossTenantAccessPolicy(),
//     "#microsoft.graph.homeRealmDiscoveryPolicy" => new HomeRealmDiscoveryPolicy(),
//     "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy" => new IdentitySecurityDefaultsEnforcementPolicy(),
//     "#microsoft.graph.permissionGrantPolicy" => new PermissionGrantPolicy(),
//     "#microsoft.graph.stsPolicy" => new StsPolicy(),
//     "#microsoft.graph.tenantAppManagementPolicy" => new TenantAppManagementPolicy(),
//     "#microsoft.graph.tokenIssuancePolicy" => new TokenIssuancePolicy(),
//     "#microsoft.graph.tokenLifetimePolicy" => new TokenLifetimePolicy(),
//     _ => new PolicyBase(),
// };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"description", n => { Description = n.GetStringValue(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
        }
    }
}
