// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models {
    public class OnenoteEntityBaseModel : Entity, IParsable 
    {
        /// <summary>The endpoint where you can get details about the page. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self {
            get { return BackingStore?.Get<string?>("self"); }
            set { BackingStore?.Set("self", value); }
        }
#nullable restore
#else
        public string Self {
            get { return BackingStore?.Get<string>("self"); }
            set { BackingStore?.Set("self", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="OnenoteEntityBaseModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new OnenoteEntityBaseModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
OnenoteEntityBaseModel result;
switch (mappingValue)
{
    case "#microsoft.graph.notebook":
        result = new Notebook();
        break;
    case "#microsoft.graph.onenoteEntityHierarchyModel":
        result = new OnenoteEntityHierarchyModel();
        break;
    case "#microsoft.graph.onenoteEntitySchemaObjectModel":
        result = new OnenoteEntitySchemaObjectModel();
        break;
    case "#microsoft.graph.onenotePage":
        result = new OnenotePage();
        break;
    case "#microsoft.graph.onenoteResource":
        result = new OnenoteResource();
        break;
    case "#microsoft.graph.onenoteSection":
        result = new OnenoteSection();
        break;
    case "#microsoft.graph.sectionGroup":
        result = new SectionGroup();
        break;
    default:
        result = new OnenoteEntityBaseModel();
        break;
}
return result;

// Original C# 8.0 code:
// return mappingValue switch
// {
//     "#microsoft.graph.notebook" => new Notebook(),
//     "#microsoft.graph.onenoteEntityHierarchyModel" => new OnenoteEntityHierarchyModel(),
//     "#microsoft.graph.onenoteEntitySchemaObjectModel" => new OnenoteEntitySchemaObjectModel(),
//     "#microsoft.graph.onenotePage" => new OnenotePage(),
//     "#microsoft.graph.onenoteResource" => new OnenoteResource(),
//     "#microsoft.graph.onenoteSection" => new OnenoteSection(),
//     "#microsoft.graph.sectionGroup" => new SectionGroup(),
//     _ => new OnenoteEntityBaseModel(),
// };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"self", n => { Self = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("self", Self);
        }
    }
}
