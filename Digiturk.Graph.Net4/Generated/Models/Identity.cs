// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models {
    public class Identity : IAdditionalDataHolder, IBackedModel, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData {
            get { return BackingStore?.Get<IDictionary<string, object>>("AdditionalData"); }
            set { BackingStore?.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The display name of the identity. The display name might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won&apos;t show up as having changed when using delta.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>Unique identifier for the identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id {
            get { return BackingStore?.Get<string?>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#nullable restore
#else
        public string Id {
            get { return BackingStore?.Get<string>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Identity"/> and sets the default values.
        /// </summary>
        public Identity()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Identity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Identity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
Identity result;
switch (mappingValue)
{
    case "#microsoft.graph.azureCommunicationServicesUserIdentity":
        result = new AzureCommunicationServicesUserIdentity();
        break;
    case "#microsoft.graph.communicationsApplicationIdentity":
        result = new CommunicationsApplicationIdentity();
        break;
    case "#microsoft.graph.communicationsApplicationInstanceIdentity":
        result = new CommunicationsApplicationInstanceIdentity();
        break;
    case "#microsoft.graph.communicationsEncryptedIdentity":
        result = new CommunicationsEncryptedIdentity();
        break;
    case "#microsoft.graph.communicationsGuestIdentity":
        result = new CommunicationsGuestIdentity();
        break;
    case "#microsoft.graph.communicationsPhoneIdentity":
        result = new CommunicationsPhoneIdentity();
        break;
    case "#microsoft.graph.communicationsUserIdentity":
        result = new CommunicationsUserIdentity();
        break;
    case "#microsoft.graph.emailIdentity":
        result = new EmailIdentity();
        break;
    case "#microsoft.graph.initiator":
        result = new Initiator();
        break;
    case "#microsoft.graph.provisionedIdentity":
        result = new ProvisionedIdentity();
        break;
    case "#microsoft.graph.provisioningServicePrincipal":
        result = new ProvisioningServicePrincipal();
        break;
    case "#microsoft.graph.provisioningSystem":
        result = new ProvisioningSystem();
        break;
    case "#microsoft.graph.servicePrincipalIdentity":
        result = new ServicePrincipalIdentity();
        break;
    case "#microsoft.graph.sharePointIdentity":
        result = new SharePointIdentity();
        break;
    case "#microsoft.graph.teamworkApplicationIdentity":
        result = new TeamworkApplicationIdentity();
        break;
    case "#microsoft.graph.teamworkConversationIdentity":
        result = new TeamworkConversationIdentity();
        break;
    case "#microsoft.graph.teamworkTagIdentity":
        result = new TeamworkTagIdentity();
        break;
    case "#microsoft.graph.teamworkUserIdentity":
        result = new TeamworkUserIdentity();
        break;
    case "#microsoft.graph.userIdentity":
        result = new UserIdentity();
        break;
    default:
        result = new Identity();
        break;
}
return result;

// Original C# 8.0 code:
// return mappingValue switch
// {
//     "#microsoft.graph.azureCommunicationServicesUserIdentity" => new AzureCommunicationServicesUserIdentity(),
//     "#microsoft.graph.communicationsApplicationIdentity" => new CommunicationsApplicationIdentity(),
//     "#microsoft.graph.communicationsApplicationInstanceIdentity" => new CommunicationsApplicationInstanceIdentity(),
//     "#microsoft.graph.communicationsEncryptedIdentity" => new CommunicationsEncryptedIdentity(),
//     "#microsoft.graph.communicationsGuestIdentity" => new CommunicationsGuestIdentity(),
//     "#microsoft.graph.communicationsPhoneIdentity" => new CommunicationsPhoneIdentity(),
//     "#microsoft.graph.communicationsUserIdentity" => new CommunicationsUserIdentity(),
//     "#microsoft.graph.emailIdentity" => new EmailIdentity(),
//     "#microsoft.graph.initiator" => new Initiator(),
//     "#microsoft.graph.provisionedIdentity" => new ProvisionedIdentity(),
//     "#microsoft.graph.provisioningServicePrincipal" => new ProvisioningServicePrincipal(),
//     "#microsoft.graph.provisioningSystem" => new ProvisioningSystem(),
//     "#microsoft.graph.servicePrincipalIdentity" => new ServicePrincipalIdentity(),
//     "#microsoft.graph.sharePointIdentity" => new SharePointIdentity(),
//     "#microsoft.graph.teamworkApplicationIdentity" => new TeamworkApplicationIdentity(),
//     "#microsoft.graph.teamworkConversationIdentity" => new TeamworkConversationIdentity(),
//     "#microsoft.graph.teamworkTagIdentity" => new TeamworkTagIdentity(),
//     "#microsoft.graph.teamworkUserIdentity" => new TeamworkUserIdentity(),
//     "#microsoft.graph.userIdentity" => new UserIdentity(),
//     _ => new Identity(),
// };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
